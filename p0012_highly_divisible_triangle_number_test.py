"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the divisors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?


Answer:
    76576500
"""


from collections import Counter
from functools import reduce
from itertools import count
from operator import mul
from euler.prime import prime_factors


def triangle_numbers():
    x = 0
    for y in count(1):
        x = x + y
        yield x


def num_divisors(n):
    fs = dict(Counter(prime_factors(n)))
    return reduce(mul, (x + 1 for x in fs.values()), 1)


def first_with_n_divisors(seq, n):
    return next(x for x in seq if num_divisors(x) >= n)


def test_0012_highly_divisible_triangle_number():
    assert first_with_n_divisors(triangle_numbers(), 500) == 76576500

